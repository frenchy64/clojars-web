(ns clojars.attestation-verification
  "Verification of build attestations from trusted workflows.
  
  Clojars only accepts attestations generated by workflows that have been
  vetted and trusted by Clojars maintainers. This ensures that attestations
  follow the secure build practices and provenance tracking required by Clojars."
  (:require
   [clojure.string :as str]))

(def ^:private default-trusted-workflows
  "Default set of trusted workflow paths that Clojars accepts attestations from.
  Each entry is a map with:
  - :repo - The GitHub repository (e.g., 'clojars/clojars-web')
  - :workflow - The workflow file path (e.g., '.github/workflows/attestable-build-lein.yml')
  - :ref - Optional ref constraint (e.g., 'refs/heads/main' or 'refs/tags/v*')
  
  These workflows have been vetted by Clojars maintainers to ensure they follow
  secure build practices with complete provenance tracking."
  [{:repo "clojars/clojars-web"
    :workflow ".github/workflows/attestable-build-lein.yml"
    :ref "refs/heads/main"}
   {:repo "clojars/clojars-web"
    :workflow ".github/workflows/attestable-clojure-cli.yml"
    :ref "refs/heads/main"}])

(defn- parse-workflow-ref
  "Parse a GitHub Actions workflow reference into components.
  
  Format: owner/repo/.github/workflows/file.yml@ref
  Returns: {:repo 'owner/repo' :workflow '.github/workflows/file.yml' :ref 'ref'}"
  [workflow-ref]
  (when workflow-ref
    (let [[path ref] (str/split workflow-ref #"@" 2)
          parts (str/split path #"/" 4)]
      (when (and (>= (count parts) 4)
                 (= ".github" (nth parts 2)))
        {:repo (str (first parts) "/" (second parts))
         :workflow (str (nth parts 2) "/" (nth parts 3))
         :ref ref}))))

(defn- ref-matches?
  "Check if a ref matches a ref constraint pattern.
  
  Patterns can be:
  - Exact match: 'refs/heads/main'
  - Wildcard: 'refs/tags/*' or 'refs/tags/v*'"
  [ref pattern]
  (cond
    (nil? pattern) true ;; No constraint
    (= ref pattern) true ;; Exact match
    (str/ends-with? pattern "*")
    (str/starts-with? ref (subs pattern 0 (dec (count pattern))))
    :else false))

(defn- workflow-trusted?
  "Check if a workflow reference is in the trusted set."
  [parsed-workflow trusted-workflows]
  (some (fn [trusted]
          (and (= (:repo parsed-workflow) (:repo trusted))
               (= (:workflow parsed-workflow) (:workflow trusted))
               (ref-matches? (:ref parsed-workflow) (:ref trusted))))
        trusted-workflows))

(defn verify-attestation-workflow
  "Verify that an attestation came from a trusted workflow.
  
  Parameters:
  - workflow-ref: The full workflow reference (e.g., 'clojars/clojars-web/.github/workflows/attestable-build-lein.yml@main')
  - trusted-workflows: Optional set of trusted workflows (defaults to default-trusted-workflows)
  
  Returns:
  - {:valid true :workflow parsed-workflow} if trusted
  - {:valid false :reason explanation} if not trusted"
  ([workflow-ref]
   (verify-attestation-workflow workflow-ref default-trusted-workflows))
  ([workflow-ref trusted-workflows]
   (if-let [parsed (parse-workflow-ref workflow-ref)]
     (if (workflow-trusted? parsed trusted-workflows)
       {:valid true
        :workflow parsed}
       {:valid false
        :reason (format "Workflow '%s' is not in the trusted workflow list" workflow-ref)
        :workflow parsed})
     {:valid false
      :reason (format "Could not parse workflow reference: '%s'" workflow-ref)})))

(defn trusted-workflow-list
  "Get the list of trusted workflows.
  
  Can be overridden via configuration in the future."
  ([]
   (trusted-workflow-list nil))
  ([config]
   (or (:trusted-workflows config)
       default-trusted-workflows)))

(defn format-trusted-workflow
  "Format a trusted workflow entry for display."
  [workflow]
  (str (:repo workflow) "/" (:workflow workflow)
       (when (:ref workflow)
         (str "@" (:ref workflow)))))

(defn list-trusted-workflows
  "List all trusted workflows in human-readable format."
  ([]
   (list-trusted-workflows nil))
  ([config]
   (map format-trusted-workflow (trusted-workflow-list config))))
