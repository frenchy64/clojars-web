#!/usr/bin/env bash
# Setup test environment for running kaocha tests locally
# This script mirrors the CI workflow setup from GitHub Actions

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPO_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"

echo "Setting up test environment for Clojars integration tests..."

# Color output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if a docker container is running
is_container_running() {
    local container_name=$1
    docker ps --filter "name=${container_name}" --filter "status=running" --format '{{.Names}}' | grep -q "^${container_name}$"
}

# Check if a port is in use
is_port_listening() {
    local port=$1
    nc -z localhost "$port" 2>/dev/null
}

# Wait for a service to be ready
wait_for_service() {
    local service_name=$1
    local port=$2
    local max_wait=60
    
    info "Waiting for ${service_name} on port ${port}..."
    timeout ${max_wait} bash -c "until nc -z localhost ${port}; do sleep 1; done" 2>/dev/null && \
        info "${service_name} is ready!" || \
        error "${service_name} failed to start within ${max_wait} seconds"
}

# Setup PostgreSQL
setup_postgres() {
    local container_name="clojars-test-postgres"
    local port=5432
    
    if is_container_running "${container_name}"; then
        info "PostgreSQL container '${container_name}' is already running"
    else
        info "Starting PostgreSQL container..."
        docker run -d --name "${container_name}" \
            -p ${port}:5432 \
            -e POSTGRES_USER=clojars \
            -e POSTGRES_PASSWORD=clojars \
            -e POSTGRES_DB=clojars \
            postgres:12.1
        
        wait_for_service "PostgreSQL" ${port}
    fi
}

# Setup MinIO
setup_minio() {
    local container_name="clojars-test-minio"
    local port=9000
    
    if is_container_running "${container_name}"; then
        info "MinIO container '${container_name}' is already running"
    else
        info "Starting MinIO container..."
        docker run -d --name "${container_name}" \
            -p ${port}:9000 \
            -e MINIO_ROOT_USER=fake-access-key \
            -e MINIO_ROOT_PASSWORD=fake-secret-key \
            minio/minio:RELEASE.2023-04-20T17-56-55Z \
            server /data
        
        wait_for_service "MinIO" ${port}
    fi
}

# Setup ElasticMQ
setup_elasticmq() {
    local container_name="clojars-test-elasticmq"
    local port=9324
    local config_file="${REPO_DIR}/dev-resources/elasticmq.conf"
    
    if is_container_running "${container_name}"; then
        info "ElasticMQ container '${container_name}' is already running"
    else
        info "Starting ElasticMQ container..."
        docker run -d --name "${container_name}" \
            -p ${port}:9324 \
            -p 9325:9325 \
            -v "${config_file}:/opt/elasticmq.conf:ro" \
            softwaremill/elasticmq:1.6.12
        
        wait_for_service "ElasticMQ" ${port}
    fi
}

# Main setup
main() {
    info "Checking prerequisites..."
    
    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    # Check if nc (netcat) is installed
    if ! command -v nc &> /dev/null; then
        warn "netcat (nc) is not installed. Installing it may help with service health checks."
    fi
    
    # Check if Java is installed
    if ! command -v java &> /dev/null; then
        error "Java is not installed. Please install Java 21."
        exit 1
    fi
    
    # Check Java version
    java_version=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
    if [ "$java_version" -lt 21 ]; then
        warn "Java version ${java_version} detected. Java 21 is recommended for this project."
    else
        info "Java ${java_version} detected ✓"
    fi
    
    # Check if Clojure is installed
    if ! command -v clojure &> /dev/null; then
        error "Clojure CLI is not installed. Please install from https://clojure.org/guides/install_clojure"
        exit 1
    else
        info "Clojure CLI is installed ✓"
    fi
    
    info "Starting required services..."
    setup_postgres
    setup_minio
    setup_elasticmq
    
    info ""
    info "====================================="
    info "Test environment is ready!"
    info "====================================="
    info ""
    info "Services running:"
    info "  - PostgreSQL: localhost:5432"
    info "  - MinIO:      localhost:9000"
    info "  - ElasticMQ:  localhost:9324"
    info ""
    info "You can now run tests with:"
    info "  export CLOJARS_ENVIRONMENT=test"
    info "  export DB_PORT=5432"
    info "  ./bin/kaocha"
    info ""
    info "Or run migrations first:"
    info "  export CLOJARS_ENVIRONMENT=test"
    info "  export DB_PORT=5432"
    info "  make migrate-db"
    info "  ./bin/kaocha"
    info ""
    info "To stop the services, run:"
    info "  docker stop clojars-test-postgres clojars-test-minio clojars-test-elasticmq"
    info "  docker rm clojars-test-postgres clojars-test-minio clojars-test-elasticmq"
}

main "$@"
