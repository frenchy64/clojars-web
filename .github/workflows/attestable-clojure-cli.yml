# Clojars Reusable Attestable Build Workflow for Clojure CLI (tools.build) Projects
#
# This is a reusable workflow maintained by Clojars that provides secure, reproducible
# builds with full provenance tracking. Clojars trusts and accepts attestations from this workflow.
#
# SUPPORTED CLOJURE CLI VERSIONS:
# - 1.12.3.1577 (default)
#
# USAGE: Call this workflow from your repository's workflow:
#
# ```yaml
# name: Release
# on:
#   push:
#     tags: ['v*']
# jobs:
#   build:
#     uses: clojars/clojars-web/.github/workflows/attestable-clojure-cli.yml@main
#     with:
#       java-version: '21'
#       clojure-version: '1.12.3.1577'
# ```
#
# After the workflow completes, download the attested artifacts (JAR and POM):
#
# ```yaml
# jobs:
#   build:
#     uses: clojars/clojars-web/.github/workflows/attestable-clojure-cli.yml@main
#     # ... inputs ...
#   
#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download attested artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: attested-jar
#           path: artifacts/
#       
#       - name: Deploy to Clojars
#         run: |
#           # Use Maven deploy:deploy-file to upload attested artifacts
#           mvn deploy:deploy-file \
#             -Dfile=artifacts/*.jar \
#             -DpomFile=artifacts/pom.xml \
#             -DrepositoryId=clojars \
#             -Durl=https://repo.clojars.org
#         env:
#           CLOJARS_USERNAME: ${{ secrets.CLOJARS_USERNAME }}
#           CLOJARS_PASSWORD: ${{ secrets.CLOJARS_PASSWORD }}
# ```
#
# This workflow uses a multi-job pipeline to:
# 1. Download and verify dependencies in isolation
# 2. Build artifacts offline with verified dependencies
# 3. Analyze build provenance and verify all source files
# 4. Generate attestation ONLY after verification passes
# 5. Upload attested artifacts for deployment
#
# Note: This workflow does NOT deploy to Clojars automatically.
# Deployment should only happen after full attestation is complete and verified.
#
# TODO: Establish conventions for expected tools/aliases in projects
# - Currently assumes `-T:build jar` for building JARs
# - May need to standardize alias names across ecosystem (e.g., :build, :deploy)
# - Consider supporting alternative build aliases or auto-detection
#
# TODO: Handle gitlibs reproducibility concerns
# - Gitlibs may produce non-reproducible artifacts during prep
# - Need to record each gitlib's commit hash
# - Need to checksum generated artifacts in gitlibs during prep
# - Consider creating minimal gitlibs cache similar to Maven cache
# - Verify gitlibs checksums across all jobs

name: Attestable Clojure CLI Build (Clojars Trusted)

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use for the build'
        required: false
        default: '21'
        type: string
      clojure-version:
        description: 'Clojure CLI version to use (supported: 1.12.3.1577)'
        required: false
        default: '1.12.3.1577'
        type: string

env:
  # Pinned Clojure CLI version for reproducibility
  CLOJURE_VERSION: ${{ inputs.clojure-version }}
  # Immutable URL for the Clojure CLI installer (pinned to version tag)
  CLOJURE_INSTALLER_URL: "https://github.com/clojure/brew-install/releases/download/${{ inputs.clojure-version }}/linux-install.sh"
  # SHA256 checksums for supported Clojure CLI installer versions
  CLOJURE_INSTALLER_1_12_3_1577_SHA256: "a55106244ca93ef7b61309e9dca4b248257685870824a8abe2efa706ede8241f"

jobs:
  # Job 1: Download and cache dependencies in isolation
  prepare-dependencies:
    runs-on: ubuntu-latest
    outputs:
      deps-hash: ${{ steps.cache-deps.outputs.hash }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '${{ inputs.java-version }}'
          distribution: 'temurin'
      
      - name: Download and verify Clojure CLI installer
        run: |
          # Download Clojure CLI installer from immutable version tag
          curl -sL "$CLOJURE_INSTALLER_URL" -o install-clojure.sh
          
          # Select the correct checksum based on the Clojure CLI version
          case "$CLOJURE_VERSION" in
            1.12.3.1577)
              EXPECTED_SHA256="$CLOJURE_INSTALLER_1_12_3_1577_SHA256"
              ;;
            *)
              echo "ERROR: Unsupported Clojure CLI version: $CLOJURE_VERSION"
              echo "Supported versions: 1.12.3.1577"
              exit 1
              ;;
          esac
          
          # Verify the SHA256 checksum of the installer
          echo "$EXPECTED_SHA256  install-clojure.sh" | sha256sum -c - || {
            echo "ERROR: Clojure CLI installer checksum verification failed!"
            echo "Expected: $EXPECTED_SHA256"
            echo "Got: $(sha256sum install-clojure.sh | cut -d' ' -f1)"
            exit 1
          }
          
          chmod +x install-clojure.sh
      
      - name: Install Clojure CLI
        run: |
          # Install Clojure CLI
          sudo ./install-clojure.sh
          
          clojure --version
          
          # Save Clojure installation for later jobs
          mkdir -p /tmp/clojure-install
          cp install-clojure.sh /tmp/clojure-install/
          
          # Copy installed Clojure CLI files
          if [[ -d /usr/local/lib/clojure ]]; then
            cp -r /usr/local/lib/clojure /tmp/clojure-install/
          fi
          if [[ -f /usr/local/bin/clojure ]]; then
            cp /usr/local/bin/clojure /tmp/clojure-install/
          fi
          if [[ -f /usr/local/bin/clj ]]; then
            cp /usr/local/bin/clj /tmp/clojure-install/
          fi
      
      - name: Calculate Clojure installation checksums
        run: |
          cd /tmp/clojure-install
          find . -type f -exec sha256sum {} \; | sort > /tmp/clojure-checksums.txt
          echo "Clojure installation checksums calculated"
          cat /tmp/clojure-checksums.txt
      
      - name: Download dependencies
        run: |
          # Download all dependencies
          clojure -P -T:build
          
          echo "Dependencies downloaded to ~/.m2/repository and ~/.gitlibs"
      
      - name: Identify required dependencies
        run: |
          # Get the classpath to see which JARs are actually used
          CLASSPATH=$(clojure -Spath -T:build)
          
          # Parse the classpath to find all JAR files
          echo "$CLASSPATH" | tr ':' '\n' | grep '\.jar$' > /tmp/required-jars.txt || true
          
          # Also get gitlibs if any
          if [[ -d ~/.gitlibs ]]; then
            find ~/.gitlibs -type f -name "*.jar" >> /tmp/required-jars.txt || true
          fi
          
          echo "Found $(wc -l < /tmp/required-jars.txt) required JAR files"
      
      - name: Clean unused dependencies from Maven cache
        run: |
          # Create a temporary directory for required dependencies
          mkdir -p /tmp/minimal-m2/repository
          
          # Copy only the required JARs and their POMs to the minimal cache
          while IFS= read -r jar_path; do
            if [[ -f "$jar_path" ]]; then
              # Get the relative path from ~/.m2/repository
              if [[ "$jar_path" == *"/.m2/repository/"* ]]; then
                rel_path="${jar_path#*/.m2/repository/}"
                target_dir="/tmp/minimal-m2/repository/$(dirname "$rel_path")"
                mkdir -p "$target_dir"
                cp "$jar_path" "$target_dir/"
                
                # Also copy the POM file if it exists
                pom_path="${jar_path%.jar}.pom"
                if [[ -f "$pom_path" ]]; then
                  cp "$pom_path" "$target_dir/"
                fi
              fi
            fi
          done < /tmp/required-jars.txt
          
          # Also include gitlibs if present
          if [[ -d ~/.gitlibs ]]; then
            mkdir -p /tmp/minimal-m2/gitlibs
            cp -r ~/.gitlibs/* /tmp/minimal-m2/gitlibs/ || true
          fi
          
          echo "Minimal Maven cache created at /tmp/minimal-m2"
      
      - name: Calculate checksums for all dependencies
        id: cache-deps
        run: |
          # Calculate SHA256 for all files in the minimal cache
          cd /tmp/minimal-m2
          find . -type f -exec sha256sum {} \; | sort > /tmp/deps-checksums.txt
          
          # Calculate overall hash of all dependencies
          DEPS_HASH=$(sha256sum /tmp/deps-checksums.txt | cut -d' ' -f1)
          echo "hash=$DEPS_HASH" >> $GITHUB_OUTPUT
          
          echo "Dependencies checksum: $DEPS_HASH"
          echo "Total files: $(wc -l < /tmp/deps-checksums.txt)"
      
      - name: Upload minimal dependency cache
        uses: actions/upload-artifact@v4
        with:
          name: minimal-m2-cache
          path: /tmp/minimal-m2/
          retention-days: 1
      
      - name: Upload Clojure installation
        uses: actions/upload-artifact@v4
        with:
          name: clojure-install
          path: /tmp/clojure-install/
          retention-days: 1
      
      - name: Upload dependency and Clojure checksums
        uses: actions/upload-artifact@v4
        with:
          name: deps-checksums
          path: |
            /tmp/deps-checksums.txt
            /tmp/required-jars.txt
            /tmp/clojure-checksums.txt
          retention-days: 1

  # Job 2: Build artifacts offline with verified dependencies
  build-artifacts:
    runs-on: ubuntu-latest
    needs: prepare-dependencies
    outputs:
      jar-file: ${{ steps.artifacts.outputs.jar-file }}
      pom-file: ${{ steps.artifacts.outputs.pom-file }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download minimal dependency cache
        uses: actions/download-artifact@v4
        with:
          name: minimal-m2-cache
          path: /tmp/minimal-m2/
      
      - name: Download dependency checksums
        uses: actions/download-artifact@v4
        with:
          name: deps-checksums
          path: /tmp/
      
      - name: Verify dependency checksums
        run: |
          cd /tmp/minimal-m2
          
          # Verify all files match their expected checksums
          if ! sha256sum -c /tmp/deps-checksums.txt; then
            echo "ERROR: Dependency checksum verification failed!"
            echo "The downloaded dependencies do not match the expected checksums."
            exit 1
          fi
          
          echo "All dependency checksums verified successfully"
      
      - name: Download Clojure installation
        uses: actions/download-artifact@v4
        with:
          name: clojure-install
          path: /tmp/clojure-install/
      
      - name: Verify Clojure installation checksums
        run: |
          cd /tmp/clojure-install
          
          # Verify all Clojure files match their expected checksums
          if ! sha256sum -c /tmp/clojure-checksums.txt; then
            echo "ERROR: Clojure installation checksum verification failed!"
            echo "The downloaded Clojure installation does not match the expected checksums."
            exit 1
          fi
          
          echo "All Clojure installation checksums verified successfully"
      
      - name: Restore Maven cache and gitlibs
        run: |
          # Restore the minimal Maven cache
          mkdir -p ~/.m2
          cp -r /tmp/minimal-m2/repository ~/.m2/ || true
          
          # Restore gitlibs if present
          if [[ -d /tmp/minimal-m2/gitlibs ]]; then
            mkdir -p ~/.gitlibs
            cp -r /tmp/minimal-m2/gitlibs/* ~/.gitlibs/ || true
          fi
      
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '${{ inputs.java-version }}'
          distribution: 'temurin'
      
      - name: Restore Clojure CLI
        run: |
          # Restore Clojure CLI from verified installation
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/local/bin
          
          if [[ -d /tmp/clojure-install/clojure ]]; then
            sudo cp -r /tmp/clojure-install/clojure /usr/local/lib/
          fi
          if [[ -f /tmp/clojure-install/clojure ]]; then
            sudo cp /tmp/clojure-install/clojure /usr/local/bin/
            sudo chmod +x /usr/local/bin/clojure
          fi
          if [[ -f /tmp/clojure-install/clj ]]; then
            sudo cp /tmp/clojure-install/clj /usr/local/bin/
            sudo chmod +x /usr/local/bin/clj
          fi
          
          clojure --version
      
      - name: Extract version from tag
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build JAR and POM offline
        env:
          # Attempt to prevent network access
          http_proxy: "http://localhost:9999"
          https_proxy: "http://localhost:9999"
        run: |
          # Build the JAR using only cached dependencies
          # Note: tools.build doesn't have a strict offline mode like Lein,
          # but we can try to ensure no network access via proxy settings
          clojure -T:build jar || {
            echo "Build failed. This might indicate missing dependencies or network access attempts."
            exit 1
          }
          
          echo "Build completed"
      
      - name: Find built artifacts
        id: artifacts
        run: |
          JAR_FILE=$(find target -name "*.jar" | head -n 1)
          POM_FILE=$(find target -name "pom.xml" | head -n 1)
          
          if [[ ! -f "$JAR_FILE" ]]; then
            echo "ERROR: JAR file not found in target directory"
            exit 1
          fi
          
          echo "jar-file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "pom-file=${POM_FILE:-pom.xml}" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR_FILE"
          if [[ -f "$POM_FILE" ]]; then
            echo "Found POM: $POM_FILE"
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ${{ steps.artifacts.outputs.jar-file }}
            ${{ steps.artifacts.outputs.pom-file }}
          retention-days: 90

  # Job 3: Verify build provenance
  verify-provenance:
    runs-on: ubuntu-latest
    needs: [prepare-dependencies, build-artifacts]
    permissions:
      contents: write  # For creating release
      id-token: write  # For attestation
      attestations: write  # For artifact attestation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download minimal dependency cache
        uses: actions/download-artifact@v4
        with:
          name: minimal-m2-cache
          path: /tmp/minimal-m2/
      
      - name: Download dependency checksums
        uses: actions/download-artifact@v4
        with:
          name: deps-checksums
          path: /tmp/
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: /tmp/artifacts/
      
      - name: Verify dependency checksums again
        run: |
          cd /tmp/minimal-m2
          sha256sum -c /tmp/deps-checksums.txt || {
            echo "ERROR: Dependency checksums do not match in verification job"
            exit 1
          }
      
      - name: Analyze build provenance
        run: |
          set -euo pipefail
          
          JAR_FILE=$(find /tmp/artifacts -name "*.jar" | head -n 1)
          PROVENANCE_REPORT="/tmp/provenance-report.txt"
          
          echo "=== Build Provenance Report ===" > "$PROVENANCE_REPORT"
          echo "Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$PROVENANCE_REPORT"
          echo "JAR: $(basename "$JAR_FILE")" >> "$PROVENANCE_REPORT"
          echo "JAR SHA256: $(sha256sum "$JAR_FILE" | cut -d' ' -f1)" >> "$PROVENANCE_REPORT"
          echo "" >> "$PROVENANCE_REPORT"
          
          # Extract JAR contents
          EXTRACT_DIR="/tmp/jar-contents"
          mkdir -p "$EXTRACT_DIR"
          cd "$EXTRACT_DIR"
          unzip -q "$JAR_FILE"
          
          echo "=== File Provenance Analysis ===" >> "$PROVENANCE_REPORT"
          echo "" >> "$PROVENANCE_REPORT"
          
          VERIFIED_COUNT=0
          UNVERIFIED_CLJ_FILES=()
          SUSPICIOUS_CLASS_FILES=()
          
          # Analyze each file in the JAR
          while IFS= read -r -d '' jar_file; do
            rel_path="${jar_file#$EXTRACT_DIR/}"
            
            # Skip META-INF files
            if [[ "$rel_path" == META-INF/* ]]; then
              continue
            fi
            
            jar_checksum=$(sha256sum "$jar_file" | cut -d' ' -f1)
            found_source=false
            
            # Check if file exists in source repository
            if [[ -f "$GITHUB_WORKSPACE/$rel_path" ]]; then
              repo_checksum=$(sha256sum "$GITHUB_WORKSPACE/$rel_path" | cut -d' ' -f1)
              if [[ "$jar_checksum" == "$repo_checksum" ]]; then
                echo "✓ $rel_path - matches source repository" >> "$PROVENANCE_REPORT"
                ((VERIFIED_COUNT++))
                found_source=true
              fi
            fi
            
            # If not in source, check dependencies
            if ! $found_source; then
              found_in_dep=false
              
              # Search in dependency JARs
              while IFS= read -r dep_jar; do
                if [[ -f "$dep_jar" ]] && unzip -l "$dep_jar" 2>/dev/null | grep -q " $rel_path$"; then
                  # Extract and compare
                  temp_extract="/tmp/dep-extract-$$"
                  mkdir -p "$temp_extract"
                  unzip -q "$dep_jar" "$rel_path" -d "$temp_extract" 2>/dev/null || continue
                  
                  if [[ -f "$temp_extract/$rel_path" ]]; then
                    dep_checksum=$(sha256sum "$temp_extract/$rel_path" | cut -d' ' -f1)
                    if [[ "$jar_checksum" == "$dep_checksum" ]]; then
                      echo "✓ $rel_path - matches dependency $(basename "$dep_jar")" >> "$PROVENANCE_REPORT"
                      ((VERIFIED_COUNT++))
                      found_in_dep=true
                      rm -rf "$temp_extract"
                      break
                    else
                      if [[ "$rel_path" == *.class ]]; then
                        SUSPICIOUS_CLASS_FILES+=("$rel_path (checksum mismatch with $(basename "$dep_jar"))")
                      fi
                    fi
                  fi
                  rm -rf "$temp_extract"
                fi
              done < /tmp/required-jars.txt
              
              if ! $found_in_dep; then
                if [[ "$rel_path" == *.clj || "$rel_path" == *.cljc || "$rel_path" == *.cljs ]]; then
                  UNVERIFIED_CLJ_FILES+=("$rel_path")
                  echo "✗ $rel_path - Clojure source file with unknown provenance" >> "$PROVENANCE_REPORT"
                else
                  echo "? $rel_path - provenance unknown" >> "$PROVENANCE_REPORT"
                fi
              fi
            fi
          done < <(find "$EXTRACT_DIR" -type f -print0)
          
          echo "" >> "$PROVENANCE_REPORT"
          echo "=== Summary ===" >> "$PROVENANCE_REPORT"
          echo "Verified files: $VERIFIED_COUNT" >> "$PROVENANCE_REPORT"
          echo "Unverified .clj files: ${#UNVERIFIED_CLJ_FILES[@]}" >> "$PROVENANCE_REPORT"
          echo "Suspicious .class files: ${#SUSPICIOUS_CLASS_FILES[@]}" >> "$PROVENANCE_REPORT"
          
          # Fail if unverified Clojure files found
          if [[ ${#UNVERIFIED_CLJ_FILES[@]} -gt 0 ]]; then
            echo "" >> "$PROVENANCE_REPORT"
            echo "ERROR: Found Clojure source files with unknown provenance:" >> "$PROVENANCE_REPORT"
            for file in "${UNVERIFIED_CLJ_FILES[@]}"; do
              echo "  - $file" >> "$PROVENANCE_REPORT"
            done
            echo "" >> "$PROVENANCE_REPORT"
            echo "To reproduce this error locally:" >> "$PROVENANCE_REPORT"
            echo "1. Clone the repository and checkout: $GITHUB_SHA" >> "$PROVENANCE_REPORT"
            echo "2. Build: clojure -T:build jar" >> "$PROVENANCE_REPORT"
            echo "3. Extract and inspect the JAR contents" >> "$PROVENANCE_REPORT"
            
            cat "$PROVENANCE_REPORT"
            exit 1
          fi
          
          # Fail if suspicious class files found
          if [[ ${#SUSPICIOUS_CLASS_FILES[@]} -gt 0 ]]; then
            echo "" >> "$PROVENANCE_REPORT"
            echo "ERROR: Found .class files with checksum mismatches (possible tampering):" >> "$PROVENANCE_REPORT"
            for file in "${SUSPICIOUS_CLASS_FILES[@]}"; do
              echo "  - $file" >> "$PROVENANCE_REPORT"
            done
            
            cat "$PROVENANCE_REPORT"
            exit 1
          fi
          
          cat "$PROVENANCE_REPORT"
      
      - name: Upload provenance report
        uses: actions/upload-artifact@v4
        with:
          name: provenance-report
          path: /tmp/provenance-report.txt
          retention-days: 90
      
      - name: Attest build artifacts
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: /tmp/artifacts/*.jar
      
      - name: Extract version from tag
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create attestation metadata
        run: |
          cat > /tmp/attestation-metadata.json <<EOF
          {
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "commit_tag": "${{ steps.get_version.outputs.TAG }}",
            "repository": "${{ github.repository }}",
            "attested_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "dependencies_hash": "${{ needs.prepare-dependencies.outputs.deps-hash }}"
          }
          EOF
      
      - name: Upload attested JAR and POM for deployment
        uses: actions/upload-artifact@v4
        with:
          name: attested-jar
          path: |
            /tmp/artifacts/*.jar
            /tmp/artifacts/pom.xml
          retention-days: 90
      
      - name: Upload attestation metadata
        uses: actions/upload-artifact@v4
        with:
          name: attestation-metadata
          path: /tmp/attestation-metadata.json
          retention-days: 90
      
      - name: Upload dependency checksums
        uses: actions/upload-artifact@v4
        with:
          name: dependency-checksums
          path: |
            /tmp/deps-checksums.txt
            /tmp/required-jars.txt
            /tmp/clojure-checksums.txt
          retention-days: 90
